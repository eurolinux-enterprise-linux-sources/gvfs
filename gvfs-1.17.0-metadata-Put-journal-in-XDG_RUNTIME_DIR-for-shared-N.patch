diff -up gvfs-1.4.3/metadata/metabuilder.c.bak gvfs-1.4.3/metadata/metabuilder.c
--- gvfs-1.4.3/metadata/metabuilder.c.bak	2013-05-07 18:46:57.000000000 +0200
+++ gvfs-1.4.3/metadata/metabuilder.c	2013-05-07 18:47:16.000000000 +0200
@@ -1,3 +1,4 @@
+#include "config.h"
 #include "metabuilder.h"
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -8,6 +9,44 @@
 #include <sys/mman.h>
 #include <glib/gstdio.h>
 
+#if HAVE_SYS_STATFS_H
+#include <sys/statfs.h>
+#endif
+#if HAVE_SYS_STATVFS_H
+#include <sys/statvfs.h>
+#endif
+#if HAVE_SYS_VFS_H
+#include <sys/vfs.h>
+#elif HAVE_SYS_MOUNT_H
+#if HAVE_SYS_PARAM_H
+#include <sys/param.h>
+#endif
+#include <sys/mount.h>
+#endif
+
+#if defined(HAVE_STATFS) && defined(HAVE_STATVFS)
+/* Some systems have both statfs and statvfs, pick the
+   most "native" for these */
+# if !defined(HAVE_STRUCT_STATFS_F_BAVAIL)
+   /* on solaris and irix, statfs doesn't even have the
+      f_bavail field */
+#  define USE_STATVFS
+# else
+  /* at least on linux, statfs is the actual syscall */
+#  define USE_STATFS
+# endif
+
+#elif defined(HAVE_STATFS)
+
+# define USE_STATFS
+
+#elif defined(HAVE_STATVFS)
+
+# define USE_STATVFS
+
+#endif
+
+
 #define MAJOR_VERSION 1
 #define MINOR_VERSION 0
 #define MAJOR_JOURNAL_VERSION 1
@@ -833,12 +872,88 @@ write_all_data_and_close (int fd, char *
   return res;
 }
 
+gboolean
+meta_builder_is_on_nfs (const char *filename)
+{
+#ifdef USE_STATFS
+  struct statfs statfs_buffer;
+  int statfs_result;
+#elif defined(USE_STATVFS) && defined(HAVE_STRUCT_STATVFS_F_BASETYPE)
+  struct statvfs statfs_buffer;
+  int statfs_result;
+#endif
+  char *dirname;
+  gboolean res;
+
+  dirname = g_path_get_dirname (filename);
+
+  res = FALSE;
+
+#ifdef USE_STATFS
+
+# if STATFS_ARGS == 2
+  statfs_result = statfs (dirname, &statfs_buffer);
+# elif STATFS_ARGS == 4
+  statfs_result = statfs (dirname, &statfs_buffer,
+                          sizeof (statfs_buffer), 0);
+# endif
+  if (statfs_result == 0)
+#ifdef __OpenBSD__
+    res = strcmp(statfs_buffer.f_fstypename, MOUNT_NFS) == 0;
+#else
+    res = statfs_buffer.f_type == 0x6969;
+#endif
+
+#elif defined(USE_STATVFS) && defined(HAVE_STRUCT_STATVFS_F_BASETYPE)
+  statfs_result = statvfs (dirname, &statfs_buffer);
+
+  if (statfs_result == 0)
+    res = strcmp (statfs_buffer.f_basetype, "nfs") == 0;
+#endif
+
+  g_free (dirname);
+
+  return res;
+}
+
 static char *
-get_journal_filename (const char *filename, guint32 random_tag)
+get_runtime_journal_dir (const char *tree_filename)
+{
+  char *filename;
+  char *tempdir;
+  char *ret;
+  char *dbname;
+
+  filename = g_strdup_printf ("gvfs-metadata-%s", g_get_user_name ());
+  tempdir = g_build_filename (g_get_tmp_dir (), filename, NULL);
+  g_free (filename);
+
+  if (! g_file_test (tempdir, G_FILE_TEST_EXISTS))
+    {
+      if (g_mkdir_with_parents (tempdir, 0700) != 0)
+        {
+          g_free (tempdir);
+          return NULL;
+        }
+    }
+
+  dbname = g_path_get_basename (tree_filename);
+  ret = g_build_filename (tempdir, dbname, NULL);
+
+  g_free (dbname);
+  g_free (tempdir);
+
+  return ret;
+}
+
+char *
+meta_builder_get_journal_filename (const char *tree_filename, guint32 random_tag)
 {
   const char *hexdigits = "0123456789abcdef";
   char tag[9];
   int i;
+  char *ret;
+  char *real_filename = NULL;
 
   for (i = 7; i >= 0; i--)
     {
@@ -848,7 +964,18 @@ get_journal_filename (const char *filena
 
   tag[8] = 0;
 
-  return g_strconcat (filename, "-", tag, ".log", NULL);
+  if (meta_builder_is_on_nfs (tree_filename))
+    {
+      /* Put the journal in $XDG_RUNTIME_DIR to avoid file usage from concurrent clients */
+      real_filename = get_runtime_journal_dir (tree_filename);
+    }
+
+  if (! real_filename)
+    return g_strconcat (tree_filename, "-", tag, ".log", NULL);
+
+  ret = g_strconcat (real_filename, "-", tag, ".log", NULL);
+  g_free (real_filename);
+  return ret;
 }
 
 gboolean
@@ -860,7 +987,7 @@ meta_builder_create_new_journal (const c
   gsize pos;
   gboolean res;
 
-  journal_name = get_journal_filename (filename, random_tag);
+  journal_name = meta_builder_get_journal_filename (filename, random_tag);
 
   out = g_string_new (NULL);
 
@@ -1062,7 +1189,7 @@ meta_builder_write (MetaBuilder *builder
 	  munmap (data, RANDOM_TAG_OFFSET + 4);
 	  close (fd2);
 
-	  old_log = get_journal_filename (filename, old_tag);
+	  old_log = meta_builder_get_journal_filename (filename, old_tag);
 	  g_unlink (old_log);
 	  g_free (old_log);
 	}
diff -up gvfs-1.4.3/metadata/metabuilder.h.bak gvfs-1.4.3/metadata/metabuilder.h
--- gvfs-1.4.3/metadata/metabuilder.h.bak	2013-05-07 18:46:57.000000000 +0200
+++ gvfs-1.4.3/metadata/metabuilder.h	2013-05-07 18:47:16.000000000 +0200
@@ -70,6 +70,9 @@ gboolean     meta_builder_write     (Met
 				     const char  *filename);
 gboolean     meta_builder_create_new_journal (const char *filename,
 				     guint32      random_tag);
+char *       meta_builder_get_journal_filename (const char *tree_filename,
+				     guint32      random_tag);
+gboolean     meta_builder_is_on_nfs (const char  *filename);
 MetaFile *   metafile_new           (const char  *name,
 				     MetaFile    *parent);
 void         metafile_free          (MetaFile    *file);
diff -up gvfs-1.4.3/metadata/metatree.c.bak gvfs-1.4.3/metadata/metatree.c
--- gvfs-1.4.3/metadata/metatree.c.bak	2013-05-07 18:46:57.000000000 +0200
+++ gvfs-1.4.3/metadata/metatree.c	2013-05-07 18:47:59.000000000 +0200
@@ -9,43 +9,6 @@
 #include <stdlib.h>
 #include <time.h>
 
-#if HAVE_SYS_STATFS_H
-#include <sys/statfs.h>
-#endif
-#if HAVE_SYS_STATVFS_H
-#include <sys/statvfs.h>
-#endif
-#if HAVE_SYS_VFS_H
-#include <sys/vfs.h>
-#elif HAVE_SYS_MOUNT_H
-#if HAVE_SYS_PARAM_H
-#include <sys/param.h>
-#endif
-#include <sys/mount.h>
-#endif
-
-#if defined(HAVE_STATFS) && defined(HAVE_STATVFS)
-/* Some systems have both statfs and statvfs, pick the
-   most "native" for these */
-# if !defined(HAVE_STRUCT_STATFS_F_BAVAIL)
-   /* on solaris and irix, statfs doesn't even have the
-      f_bavail field */
-#  define USE_STATVFS
-# else
-  /* at least on linux, statfs is the actual syscall */
-#  define USE_STATFS
-# endif
-
-#elif defined(HAVE_STATFS)
-
-# define USE_STATFS
-
-#elif defined(HAVE_STATVFS)
-
-# define USE_STATVFS
-
-#endif
-
 #include "metatree.h"
 #include "metabuilder.h"
 #include <glib.h>
@@ -280,46 +243,6 @@ meta_tree_clear (MetaTree *tree)
 }
 
 static gboolean
-is_on_nfs (char *filename)
-{
-#ifdef USE_STATFS
-  struct statfs statfs_buffer;
-  int statfs_result;
-#elif defined(USE_STATVFS) && defined(HAVE_STRUCT_STATVFS_F_BASETYPE)
-  struct statvfs statfs_buffer;
-  int statfs_result;
-#endif
-  char *dirname;
-  gboolean res;
-
-  dirname = g_path_get_dirname (filename);
-
-  res = FALSE;
-
-#ifdef USE_STATFS
-
-# if STATFS_ARGS == 2
-  statfs_result = statfs (dirname, &statfs_buffer);
-# elif STATFS_ARGS == 4
-  statfs_result = statfs (dirname, &statfs_buffer,
-			  sizeof (statfs_buffer), 0);
-# endif
-  if (statfs_result == 0)
-    res = statfs_buffer.f_type == 0x6969;
-
-#elif defined(USE_STATVFS) && defined(HAVE_STRUCT_STATVFS_F_BASETYPE)
-  statfs_result = statvfs (dirname, &statfs_buffer);
-
-  if (statfs_result == 0)
-    res = strcmp (statfs_buffer.f_basetype, "nfs") == 0;
-#endif
-
-  g_free (dirname);
-
-  return res;
-}
-
-static gboolean
 link_to_tmp (const char *source, char *tmpl)
 {
   char *XXXXXX;
@@ -429,7 +352,7 @@ meta_tree_init (MetaTree *tree)
 
   retried = FALSE;
  retry:
-  tree->on_nfs = is_on_nfs (tree->filename);
+  tree->on_nfs = meta_builder_is_on_nfs (tree->filename);
   fd = safe_open (tree, tree->filename, O_RDONLY);
   if (fd == -1)
     {
@@ -845,24 +768,6 @@ meta_data_get_key (MetaTree *tree,
   return dataent;
 }
 
-static char *
-get_journal_filename (const char *filename, guint32 random_tag)
-{
-  const char *hexdigits = "0123456789abcdef";
-  char tag[9];
-  int i;
-
-  for (i = 7; i >= 0; i--)
-    {
-      tag[i] = hexdigits[random_tag % 0x10];
-      random_tag >>= 4;
-    }
-
-  tag[8] = 0;
-
-  return g_strconcat (filename, "-", tag, ".log", NULL);
-}
-
 static void
 meta_journal_free (MetaJournal *journal)
 {
@@ -1157,7 +1062,7 @@ meta_journal_open (MetaTree *tree, const
     open_flags = O_RDONLY;
 
  retry:
-  journal_filename = get_journal_filename (filename, tag);
+  journal_filename = meta_builder_get_journal_filename (filename, tag);
   fd = safe_open (tree, journal_filename, open_flags);
   g_free (journal_filename);
   if (fd == -1)
